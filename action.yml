name: "Create Pull Request | jcdcdev"
description: "Creates a GitHub Pull Request with automated changelog"
author: "James Carter"
branding:
  icon: "tag"
  color: "gray-dark"
inputs:
  dry-run:
    description: "Dry run: Run the workflow without creating a Pull Request"
    required: false
    default: false
  source-branch:
    description: "Source branch"
    required: true
  target-branch:
    description: "Target branch"
    required: true
  github-token:
    description: "GitHub Token"
    required: true
outputs:
  pr-number:
    description: "Pull Request Number"
    value: ${{ steps.create-pull-request.outputs.number }}

runs:
  using: "composite"
  steps:
    - name: Set Variables
      shell: bash
      run: |
        echo "Setting variables"
        SOURCE=${{ inputs.source-branch }}
        TARGET=${{ inputs.target-branch }}
        DRY_RUN=${{ contains(inputs.dry-run, 'true') }}

        echo "SOURCE=$SOURCE"
        echo "TARGET=$TARGET"
        echo "DRY_RUN=$DRY_RUN"

        echo "SOURCE=$SOURCE" >> $GITHUB_ENV
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "DRY_RUN=$DRY_RUN" >> $GITHUB_ENV
    - name: Validate
      shell: bash
      run: |
        if [ -z "$SOURCE" ]; then
          echo "SOURCE is empty"
          exit 1
        fi

        if [ -z "$TARGET" ]; then
          echo "TARGET is empty"
          exit 1
        fi

        if [ "$SOURCE" == "$TARGET" ]; then
          echo "SOURCE is the same as TARGET"
          exit 1
        fi

        # check if source is a valid ref
        if ! git rev-parse --verify $SOURCE > /dev/null 2>&1; then
          echo "$SOURCE is not a valid ref"
          exit 1
        fi

        # check if target is a valid ref
        if ! git rev-parse --verify $TARGET > /dev/null 2>&1; then
          echo "$TARGET is not a valid ref"
          exit 1
        fi
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.SOURCE }}
    - name: Check for changes
      shell: bash
      id: check-for-changes
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      
        git fetch --all
        git checkout ${{ env.TARGET }}

        DIFF=$(git diff --name-only ${{ env.TARGET }} ${{ env.SOURCE }})
        DIFF_COUNT=$(echo $DIFF | wc -l)
        if [ $DIFF_COUNT -eq 0 ]; then
          echo "No changes between ${{ env.TARGET }} and ${{ env.SOURCE }}"
          echo "SHOULD_RUN=false" >> $GITHUB_ENV
          exit 
        fi
          
        echo "$DIFF_COUNT files changed between ${{ env.TARGET }} and ${{ env.SOURCE }}"
        
        git merge $SOURCE --no-ff --no-edit

        {
          echo 'diff<<EOF'
          echo "${DIFF}"
          echo 'EOF'
        } >> $GITHUB_ENV

        echo "SHOULD_RUN=true" >> $GITHUB_ENV
    - name: Download GitVersion.yml
      if: ${{ env.SHOULD_RUN == 'true' }}
      shell: bash
      run: curl -sSL https://raw.githubusercontent.com/jcdcdev/jcdcdev.Umbraco.GitHub.Build/main/GitVersion.yml -o GitVersion.yml
    - name: Install GitVersion
      if: ${{ env.SHOULD_RUN == 'true' }}
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: "5.x"
    - name: Determine Version
      if: ${{ env.SHOULD_RUN == 'true' }}
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        useConfigFile: true
        configFilePath: "GitVersion.yml"
        disableNormalization: true 
    - uses: jcdcdev/jcdcdev.Github.GenerateChangelog@main
      if: ${{ env.SHOULD_RUN == 'true' }}
      id: changelog
      with:
        version: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
        head-ref: ${{ env.TARGET }}
        github-token: ${{ inputs.github-token }}
        include-version-as-heading: true
        include-compare-link: false
        include-links: true
    - name: Create PR
      id: create-pull-request
      if: ${{ env.SHOULD_RUN == 'true' }}
      env:
        SOURCE: ${{ env.SOURCE }}
        TARGET: ${{ env.TARGET }}
        TITLE: "${{ steps.gitversion.outputs.NuGetVersionV2 }}"
        BODY: |          
          ${{ steps.changelog.outputs.changelog }}

          ## Files Changed
          ${{ env.DIFF }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      uses: pyrbin/single-pr-updater@latest
      with:
        label: ðŸš€ release
        head: ${{ env.SOURCE }}
        base: ${{ env.TARGET }}
        title: ${{ env.TITLE }}
        body: ${{ env.BODY }}
        draft: false